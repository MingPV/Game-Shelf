import { NextResponse } from "next/server";
import { selectReviewByProviderId } from "@/app/(user-pages)/actions";

export async function GET(
  req: Request,
  context: { params: Promise<{ provider_id: number }> }
) {
  const { provider_id } = await context.params; // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ id ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å params ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

  if (!provider_id) {
    return NextResponse.json(
      { status: "error", message: "Invoice ID is required" },
      { status: 400 }
    );
  }
  try {
    console.log("üõ¢Ô∏è Fetching from Database");
    const reviews = await selectReviewByProviderId(provider_id.toString());

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Response ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á Cookie ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    const res = NextResponse.json(
      { status: "success", data: reviews },
      { status: 200 }
    );

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cache-Control ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Vercel Edge Cache ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    res.headers.set(
      "Cache-Control",
      "s-maxage=3600, stale-while-revalidate=60"
    );

    return res;
  } catch (error) {
    return NextResponse.json(
      { status: "error", message: "Failed to fetch reviews" },
      { status: 500 }
    );
  }
}
